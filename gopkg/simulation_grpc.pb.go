// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: simulation.proto

package gopkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SimulationService_StartSimulation_FullMethodName = "/simulation.SimulationService/StartSimulation"
	SimulationService_PauseSimulation_FullMethodName = "/simulation.SimulationService/PauseSimulation"
	SimulationService_StreamUpdates_FullMethodName   = "/simulation.SimulationService/StreamUpdates"
)

// SimulationServiceClient is the client API for SimulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulationServiceClient interface {
	StartSimulation(ctx context.Context, in *SimulationRequest, opts ...grpc.CallOption) (*SimulationResponse, error)
	PauseSimulation(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	StreamUpdates(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SimulationUpdate], error)
}

type simulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulationServiceClient(cc grpc.ClientConnInterface) SimulationServiceClient {
	return &simulationServiceClient{cc}
}

func (c *simulationServiceClient) StartSimulation(ctx context.Context, in *SimulationRequest, opts ...grpc.CallOption) (*SimulationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimulationResponse)
	err := c.cc.Invoke(ctx, SimulationService_StartSimulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) PauseSimulation(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseResponse)
	err := c.cc.Invoke(ctx, SimulationService_PauseSimulation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) StreamUpdates(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SimulationUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SimulationService_ServiceDesc.Streams[0], SimulationService_StreamUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, SimulationUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimulationService_StreamUpdatesClient = grpc.ServerStreamingClient[SimulationUpdate]

// SimulationServiceServer is the server API for SimulationService service.
// All implementations must embed UnimplementedSimulationServiceServer
// for forward compatibility.
type SimulationServiceServer interface {
	StartSimulation(context.Context, *SimulationRequest) (*SimulationResponse, error)
	PauseSimulation(context.Context, *PauseRequest) (*PauseResponse, error)
	StreamUpdates(*StreamRequest, grpc.ServerStreamingServer[SimulationUpdate]) error
	mustEmbedUnimplementedSimulationServiceServer()
}

// UnimplementedSimulationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSimulationServiceServer struct{}

func (UnimplementedSimulationServiceServer) StartSimulation(context.Context, *SimulationRequest) (*SimulationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSimulation not implemented")
}
func (UnimplementedSimulationServiceServer) PauseSimulation(context.Context, *PauseRequest) (*PauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSimulation not implemented")
}
func (UnimplementedSimulationServiceServer) StreamUpdates(*StreamRequest, grpc.ServerStreamingServer[SimulationUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedSimulationServiceServer) mustEmbedUnimplementedSimulationServiceServer() {}
func (UnimplementedSimulationServiceServer) testEmbeddedByValue()                           {}

// UnsafeSimulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulationServiceServer will
// result in compilation errors.
type UnsafeSimulationServiceServer interface {
	mustEmbedUnimplementedSimulationServiceServer()
}

func RegisterSimulationServiceServer(s grpc.ServiceRegistrar, srv SimulationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSimulationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SimulationService_ServiceDesc, srv)
}

func _SimulationService_StartSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).StartSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_StartSimulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).StartSimulation(ctx, req.(*SimulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_PauseSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).PauseSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_PauseSimulation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).PauseSimulation(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimulationServiceServer).StreamUpdates(m, &grpc.GenericServerStream[StreamRequest, SimulationUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SimulationService_StreamUpdatesServer = grpc.ServerStreamingServer[SimulationUpdate]

// SimulationService_ServiceDesc is the grpc.ServiceDesc for SimulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulation.SimulationService",
	HandlerType: (*SimulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSimulation",
			Handler:    _SimulationService_StartSimulation_Handler,
		},
		{
			MethodName: "PauseSimulation",
			Handler:    _SimulationService_PauseSimulation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _SimulationService_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "simulation.proto",
}
